<?xml version="1.0" encoding="US-ASCII"?>
<rfc
    category="std"
    docName="draft-ietf-idr-bgp-model-latest"
    ipr="trust200902"
    consensus="true"
    submissionType="IETF">
  <?rfc toc="yes"?>

  <front>
    <title abbrev="BGP YANG Model">YANG Model for Border Gateway Protocol (BGP-4)</title>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization>Kloud Services</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>mjethanandani@gmail.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Keyur Patel" initials="K." surname="Patel">
      <organization>Arrcus</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region>CA</region>

          <country>USA</country>
        </postal>

        <email>keyur@arrcus.com</email>
      </address>
    </author>

    <author fullname="Susan Hares" initials="S." surname="Hares">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>7453 Hickory Hill</street>

          <city>Saline</city>

          <region>MI</region>

          <code>48176</code>

          <country>USA</country>
        </postal>

        <email>shares@ndzh.com</email>
      </address>
    </author>

    <author fullname="Jeffrey Haas" initials="J." surname="Haas">
      <organization>Juniper Networks</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>jhaas@pfrc.org</email>

        <uri/>
      </address>
    </author>

    <date/>
    <area>Routing</area>
    <workgroup>Interdomain Routing</workgroup>
    <keyword>bgp</keyword>
    <keyword>yang</keyword>

    <abstract>
      <t>This document defines a YANG data model for configuring and managing
      BGP, including protocol, policy, and operational aspects, such as RIB,
      based on data center, carrier, and content provider operational
      requirements.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>This document describes a <xref target="RFC7950">YANG 1.1</xref> data
      model for the <xref target="RFC4271">BGP-4</xref> protocol, including
      various protocol extensions, policy configuration, as well as defining
      key operational state data, including a Routing Information Base (RIB).
      The model is intended to be vendor-neutral, in order to allow operators
      to manage BGP configuration in heterogeneous environments with routers
      supplied by multiple vendors. The model is also intended to be readily
      mapped to existing implementations to facilitate support from as large a
      set of routing hardware and software vendors as possible. This module
      does not support previous versions of BGP, and cannot support
      establishing and maintaining state information of neighbors with
      previous versions of BGP.</t>

      <section anchor="goals" title="Goals and approach">
        <t>The model covers the base BGP features that are deployed
        across major implementations and the common BGP configurations
        in use across a number of operator network deployments. In
        particular, this model attempts to cover BGP features defined
        in <xref target="RFC4271">BGP</xref>, <xref
        target="RFC1997">BGP Communities Attribute </xref>, <xref
        target="RFC4360">BGP Extended Communities Attributes</xref>,
        <xref target="RFC5701">IPv6 Extended Communities Attributes</xref>,
        <xref target="RFC8092">BGP Large Communities
        Attributes</xref>, <xref target="RFC4456">BGP Route
        Reflection</xref>, <xref target="RFC4760">Multiprotocol
        Extensions for BGP-4 </xref>, <xref
        target="RFC5065">Autonomous System Confederations for BGP
        </xref>, <xref target="RFC2439">BGP Route Flap Damping
        </xref>, <xref target="RFC4724">Graceful Restart Mechanism for
        BGP </xref>, <xref target="RFC6811">BGP Prefix Origin
        Validation </xref>, and <xref target="RFC7911">Advertisement
        of Multiple Paths in BGP</xref>. It attempts to make the model
        extensible by using identities for well known standard
        community types, and the use of "raw" string to support new
        and experimental type definitions.</t>

        <t>Along with configuration of base BGP features, this model also
        addresses policy configuration, by providing "hooks" for applying
        policies, and also defining BGP-specific policy features. The BGP
        policy features are intended to be used with the general routing
        policy model defined in <xref target="RFC9067">A
        YANG Data Model for Routing Policy Management </xref>.</t>

        <t>The model conforms to the <xref target="RFC8342">NMDA</xref>
        architecture. It has support for securing BGP sessions using <xref
        target="RFC5925">TCP-AO</xref> or TCP-MD5, and for configuring <xref
        target="RFC5880">Bidirectional Forward Detection (BFD) </xref> for
        fast next hop liveliness checking.</t>

        <t>For the base BGP features, the focus of the model described in this
        document is on providing configuration and operational state
        information relating to: <list style="symbols">
            <t>The global BGP instance, and neighbors whose configuration is
            specified individually, or templated with the use of
            peer-groups.</t>

            <t>The address families that are supported by peers, and the
            global configuration which relates to them.</t>

            <t>The policy configuration "hooks" and BGP-specific policy
            features that relate to a neighbor - controlling the import and
            export of NLRIs.</t>

            <t>BGP RIB contents.</t>
          </list></t>

        <t>As mentioned earlier, any configuration items that are deemed to be
        widely available in existing major BGP implementations are included in
        the model. Additional, more esoteric, configuration items that are not
        commonly used, or only available from a single implementation, are
        omitted from the model with an expectation that they will be available
        in companion modules that augment or extend the current model. This
        allows clarity in identifying data that is part of the vendor-neutral
        base model.</t>

        <t>Where possible, naming in the model follows conventions used in
        available standards documents, and otherwise tries to be
        self-explanatory with sufficient descriptions of the intended
        behavior. Similarly, configuration data value constraints and default
        values, where used, are based on recommendations in current standards
        documentation, or those commonly used in multiple implementations.
        Since implementations can vary widely in this respect, this version of
        the model specifies only a limited set of defaults and ranges with the
        expectation of being more prescriptive in future versions based on
        actual operator use.</t>
      </section>

      <section title="Note to RFC Editor">
        <t>This document uses several placeholder values throughout the
        document. Please replace them as follows and remove this note before
        publication.</t>

        <t>RFC XXXX, where XXXX is the number assigned to this document at the
        time of publication.</t>

        <t>YYYY-MM-DD with the actual date of the publication of this
        document.</t>
      </section>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119">BCP 14 </xref> <xref target="RFC8174"/> when,
        and only when, they appear in all capitals, as shown here.</t>
      </section>

      <section title="Abbreviations">
        <texttable>
          <ttcol>Abbreviation</ttcol>

          <ttcol/>

          <c>AFI</c>

          <c>Address Family Identifier</c>

          <c>BFD</c>

          <c>Bidirectional Forward Detection</c>

          <c>NLRI</c>

          <c>Network Layer Reachability Information</c>

          <c>NMDA</c>

          <c>Network Management Datastore Architecture</c>

          <c>RIB</c>

          <c>Routing Information Base</c>

          <c>SAFI</c>

          <c>Subsequent Address Family Identifier</c>

          <c>VRF</c>

          <c>Virtual Routing and Forwarding</c>
        </texttable>
      </section>
    </section>

    <section anchor="overview" title="Model overview">
      <t>The BGP model is defined across several YANG modules and submodules,
      but at a high level is organized into six elements:</t>

      <t><list style="symbols">
          <t>base protocol configuration -- configuration affecting BGP
          protocol-related operations, defined at various levels of
          hierarchy.</t>

          <t>multi-protocol configuration -- configuration affecting individual
          address-families within BGP <xref target="RFC4760">Multiprotocol
          Extensions for BGP-4 </xref>.</t>

          <t>neighbor configuration -- configuration affecting an individual
          neighbor within BGP.</t>

          <t>neighbor multi-protocol configuration -- configuration affecting
          individual address-families for a neighbor within BGP.</t>

          <t>policy configuration -- hooks for application of the policies
          defined in <xref target="RFC9067">A YANG Data
          Model for Routing Policy Management </xref> that act on routes sent
          (received) to (from) peers or other routing protocols and
          BGP-specific policy features.</t>

          <t>operational state -- variables used for monitoring and management
          of BGP operations.</t>
        </list></t>

      <t>These modules also make use of standard Internet types, such as IP
      addresses and prefixes, autonomous system numbers, etc., defined in
      <xref target="RFC6991">Common YANG Data Types </xref>.</t>

      <section anchor="overview.protocol" title="BGP protocol configuration">
        <t>The BGP protocol configuration model is organized hierarchically,
        much like the majority of router implementations. That is,
        configuration items can be specified at multiple levels, as shown
        below.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD-sub-tree.txt)

]]></artwork>
        </figure>

        <t>Users may specify configuration at a higher level and have it apply
        to all lower-level items, or provide overriding configuration at a
        lower level of the hierarchy. Overriding configuration items are
        optional, with neighbor-specific configuration being the most specific
        or lowest level, followed by peer-group, and finally global. Global
        configuration options reflect a subset of the peer-group or
        neighbor-specific configuration options which are relevant to the
        entire BGP instance.</t>

        <t>The model makes the simplifying assumption that most of the
        configuration items are available at all levels of the hierarchy. That
        is, very little configuration is specific to a particular level in the
        hierarchy, other than obvious items such as "group-name" only being
        available for the peer group-level config. A notable exception is for
        sub-address family configuration where some items are only applicable
        for a given AFI-SAFI combination.</t>

        <t>In order to allow common configuration to be applied to a
        set of neighbors, all neighbor configuration options are
        available within a peer-group. A neighbor is associated with a
        particular peer-group through the use of a peer-group leaf
        (which provides a reference to a configured item in the
        peer-group list).</t>

        <t>Address-family configuration is made available in multiple points
        within the model - primarily within the global container, where
        instance-wide configuration can be set (for example, global protocol
        parameters, the BGP best-path route selection options, or global
        policies relating to the address-family); and on a per-neighbor or
        per-peer-group basis, where address-families can be enabled or
        disabled, and policy associated with the parent entity applied. Within
        the afi-safi container, generic configuration that applies to all
        address-families (e.g., whether the AFI-SAFI is enabled) is presented
        at the top-level, with address-family specific containers made
        available for options relating to only that AFI-SAFI. Within the
        current revision of the model a generic set of address-families, and
        common configuration and state options are included - further work is
        expected to add additional parameters to this area of the model.</t>

        <t>The model supports ipv4-unicast and ipv6-unicast address-families
        and defers the remaining AFI/SAFI to other or future drafts:</t>

        <figure>
          <artwork><![CDATA[
        +--rw bgp
          +--rw global!
             +--rw afi-safis
                +--rw afi-safi* [afi-safi-name]
                   +--rw afi-safi-name              identityref
                   |
                   +--rw ipv4-unicast
                   |     ...
                   +--rw ipv6-unicast
                   |     ...
                   +--rw ipv4-labeled-unicast
                   |     ...
                   +--rw ipv6-labeled-unicast
                   |     ...
                   +--rw l3vpn-ipv4-unicast
                   |     ...
                   +--rw l3vpn-ipv6-unicast
                   |     ...
                   +--rw l3vpn-ipv4-multicast
                   |     ...
                   +--rw l3vpn-ipv6-multicast
                   |     ...
                   +--rw l2vpn-vpls
                   |     ...
                   +--rw l2vpn-evpn
                   |     ...
      ]]></artwork>
        </figure>
      </section>

      <section anchor="overview.policy" title="Policy configuration overview">
        <t>The BGP policy configuration model augments the generic YANG
        routing policy model described in <xref
        target="RFC9067">A YANG Data Model for Routing
        Policy Management </xref>, which represents a condition-action policy
        framework for routing. This model adds BGP-specific conditions (e.g.,
        matching on the community attribute), and actions (e.g., setting local
        preference) to the generic policy framework.</t>

        <t>Policies that are defined in the routing-policy model are
        referenced in multiple places within the model: <list style="symbols">
            <t>within the global instance, where a policy applies to all
            address-families for all peers.</t>

            <t>on a global AFI-SAFI basis, where policies apply to all peers
            for a particular address-family.</t>

            <t>on a per-peer-group or per-neighbor basis - where the policy
            applies to all address-families for the particular group or
            neighbor.</t>

            <t>on a per-afi-safi basis within a neighbor or peer-group
            context, where the policy is specific to the AFI-SAFI for a a
            specific neighbor or group.</t>
          </list></t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp-policy@YYYY-MM-DD-sub-tree.txt)
            ]]></artwork>
        </figure>
      </section>

      <section title="BGP RIB overview">
        <t>The RIB data model represents the BGP RIB contents. The model
        supports five logical RIBs per address family.</t>

        <t>An abridged version of the tree shows the RIB portion of the tree
        diagram.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD-rib-tree.txt)

]]></artwork>
          </figure></t>

        <section title="Local Routing">
          <t>The loc-rib is the main BGP routing table for the local routing
          instance, containing best-path selections for each prefix. The
          loc-rib table may contain multiple routes for a given prefix, with
          an attribute to indicate which was selected as the best-path. Note
          that multiple paths may be used or advertised even if only one path
          is marked as best, e.g., when using BGP add-paths. An implementation
          may choose to mark multiple paths in the RIB as best-path by setting
          the flag to true for multiple entries.</t>
        </section>

        <section title="Pre updates per-neighbor">
          <t>The adj-rib-in-pre table is a per-neighbor table containing the
          NLRI updates received from the neighbor before any local input
          policy rules or filters have been applied. This can be considered
          the 'raw' updates from a given neighbor.</t>
        </section>

        <section title="Post updates per-neighbor">
          <t>The adj-rib-in-post table is a per-neighbor table containing the
          routes received from the neighbor that are eligible for best-path
          selection after local input policy rules have been applied.</t>
        </section>

        <section title="Pre route advertisements per-neighbor">
          <t>The adj-rib-out-pre table is a per-neighbor table containing
          routes eligible for sending (advertising) to the neighbor before
          output policy rules have been applied.</t>
        </section>

        <section title="Post route advertisements per-neighbor">
          <t>The adj-rib-out-post table is a per-neighbor table containing
          routes eligible for sending (advertising) to the neighbor after
          output policy rules have been applied.</t>
        </section>
      </section>
    </section>

    <section title="Relation to other YANG data models">
      <t>The BGP model augments the Routing Management model <xref
      target="RFC8349">A YANG Data Model for Routing Management </xref> which
      defines the notion of routing, routing protocols, and RIBs. The notion
      of Virtual Routing and Forwarding (VRF) is derived by using the <xref
      target="RFC8528">YANG Schema Mount</xref> to mount the Routing
      Management module under the <xref target="RFC8529">YANG Data Model for
      Network Instances</xref>.</t>
      <t>Similarly, it augments the <xref target="RFC9067">A YANG Data
      Model for Routing Policy Management</xref> to add in
      BGP-specific conditions and actions to the generic policy
      model.</t>
    </section>

    <section title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      <xref target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC8446">TLS</xref>. The <xref target="RFC8341">NETCONF Access
      Control Model (NACM) </xref> provides the means to restrict access for
      particular NETCONF or RESTCONF users to a preconfigured subset of all
      available NETCONF or RESTCONF protocol operations and content.</t>

      <t>There are a number of data nodes defined in this YANG module that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., edit-config) to these data
      nodes without proper protection can have a negative effect on network
      operations. Some of the subtrees and data nodes and their
      sensitivity/vulnerability are described here.</t>

      <ul>
      <li> The attribute 'as'. If a user is allowed to change this attribute,
      it will have the net effect of bringing down the entire routing
      instance, causing it to delete all the current routing entries, and
      learning new ones.</li>

      <li> The attribute 'identifier'. If a user is allowed to change this
      attribute, it will have the net effect of this routing instance
      re-advertising all its routes.</li>

      <li> The attribute 'distance'. If a user is allowed to change this
      attribute, it will cause the preference for routes, e.g. external vs
      internal to change.</li>

      <li> The attribute 'enabled' in the 'confederation' container. This
      attribute defines whether a local-AS is part of a BGP confederation.</li>

      <li> Finally, there are a whole set of route selection options such as
      'always-compare-med', 'ignore-as-path-length' that affect the way the
      system picks up a particular route. Being able to change will adversely
      affect how the route selection happens.</li>
      </ul>

      <t>Some of the readable data nodes in this YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get, get-config, or
      notification) to these data nodes. Some of the subtrees and data nodes
      and their sensitivity/vulnerability are:</t>

      <ul>
      <li> The list of neighbors, and their attributes. Allowing a user to
      read these attributes, in particular the address/port information may
      allow a malicious user to launch an attack at the particular
      address/port.</li>

      <li> The 'rib' container. This container contains sensitive information
      such as attribute sets, communities, extended communities, IPv6 extended
      communities, and large communities. Being able to read the contents of
      this container will allow a malicious user to understand how the system
      decide how to route a packet, and thus try to affect a change.</li>
      </ul>

      <t>Some of the RPC operations in this YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control access to these operations. These are the
      operations and their sensitivity/vulnerability:</t>

      <ul>
      <li> The model allows for routes to be cleared using the 'clear' RPC
      operations, causing the entire RIB table to be cleared.</li>

      <li> The model allows for statistics to be cleared by the 'clear' RPC
      operation, causing all the individual statistics to be cleared.</li>

      <li> The model also allows for neighbors that have been learnt by the
      system to be cleared by using the 'clear' RPC operation.</li>
      </ul>

      <t><xref target="RFC7454">BGP OPSEC</xref> describes several
      policies that can be used to secure BGP. In particular, it
      recommends securing the underlying TCP session and to use the <xref
      target="RFC5082">Generalized TTL Security Mechanism
      (GTSM)</xref> capability to make it harder to spoof a BGP
      session. This module allows implementations that want to support
      the capability to configure a TTL value, under a feature flag.
      It also defines a container 'secure-session' that contains a
      choice of using <xref target="RFC5925">TCP-Authentication Option
      (TCP-AO)</xref>, or <xref target="RFC2385">Protection of BGP
      Sessions via the TCP MD5 Signature Option</xref>. The support
      for MD5 has been made available for legacy reasons. However,
      because of vulnerabilities in MD5 as described in <xref
      target="RFC6151">MD5 and HMAC-MD5 Security
      Considerations</xref>, operators are strongly encouraged to use
      TCP-AO or other methods to secure their BGP session.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document registers three URIs and three YANG modules.</t>

      <section title="URI Registration">
        <t>Following the format in the <xref target="RFC3688">IETF XML
        registry</xref> [RFC3688], the following registration is requested to
        be made: <figure>
            <artwork><![CDATA[URI: urn:ietf:params:xml:ns:yang:ietf-bgp
URI: urn:ietf:params:xml:ns:yang:ietf-bgp-policy
URI: urn:ietf:params:xml:ns:yang:iana-bgp-notification
URI: urn:ietf:params:xml:ns:yang:iana-bgp-types
URI: urn:ietf:params:xml:ns:yang:iana-bgp-community-types
]]></artwork>
          </figure></t>

        <t>Registrant Contact: The IESG. XML: N/A, the requested URI is an XML
        namespace.</t>
      </section>

      <section title="YANG Module Name Registration">
        <t>This document registers three YANG modules in the YANG Module Names
        registry <xref target="RFC6020">YANG</xref>.</t>

        <t><figure>
            <artwork><![CDATA[name: ietf-bgp
namespace: urn:ietf:params:xml:ns:yang:ietf-bgp
prefix: bgp
reference: RFC XXXX

name: ietf-bgp-policy
namespace: urn:ietf:params:xml:ns:yang:ietf-bgp-policy
prefix: bp
reference: RFC XXXX

name: iana-bgp-notification
namespace: urn:ietf:params:xml:ns:yang:iana-bgp-notification
prefix: bn
reference: RFC XXXX

name: iana-bgp-types
namespace: urn:ietf:params:xml:ns:yang:iana-bgp-types
prefix: bt
reference: RFC XXXX

name: iana-bgp-community-types
namespace: urn:ietf:params:xml:ns:yang:iana-bgp-community-types
prefix: bt
reference: RFC XXXX
]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="models" title="YANG modules">
      <t>The modules comprising the BGP configuration and operational model
      are described by the YANG modules and submodules in the sections
      below.</t>

      <t>The main module, ietf-bgp.yang, includes the following submodules:
      <ul>
          <li>ietf-bgp-capabilities - defines the groupings that are common
          to the BGP Capabilities feature.</li>

          <li>ietf-bgp-common - defines the groupings that are common across
          more than one context (where contexts are neighbor, group,
          global).</li>

          <li>ietf-bgp-common-multiprotocol - defines the groupings that are
          common across more than one context, and relate to multi-protocol
          BGP.</li>

          <li>ietf-bgp-common-structure - defines groupings that are shared by
          multiple contexts, but are used only to create structural elements;
          i.e., containers (leaf nodes are defined in separate groupings).</li>

          <li>ietf-bgp-neighbor - groupings with data specific to the neighbor
          context.</li>

          <li>ietf-bgp-rib - grouping for representing BGP RIBs.</li>
	  <li>ietf-bgp-rib-attributes - common data definitions for BGP
	  attributes used in BGP RIB tables.</li>
	  <li>ietf-bgp-rib-tables - structural data definitions for BGP
	  routing tables.</li>
        </ul></t>

      <t>Additionally, modules include:
      <ul>
          <li>iana-bgp-notification - identity definitions for BGP NOTIFICATION
          message Error Codes and Error subcodes.</li>

          <li>iana-bgp-types - common type and identity definitions for BGP,
          including BGP policy.</li>

          <li>iana-bgp-community-types - common type and identity definitions
          for BGP Communities.</li>

          <li>ietf-bgp-policy - BGP-specific policy data definitions for use
          with <xref target="RFC9067"/> (described in more
          detail <xref target="overview.policy"/>).</li>
        </ul></t>
    </section>

    <section title="Structure of the YANG modules">
      <t>The YANG model can be subdivided between the main module for
      base items, types, and policy module. It references:
      <ul>
      <li><xref target="RFC1997">BGP Communities Attribute </xref></li>
      <li><xref target="RFC2918">Route Refresh Capability for BGP-4</xref></li>
      <li><xref target="RFC3765">NOPEER Community for BGP</xref></li>
      <li><xref target="RFC4360">BGP Extended Communities Attributes</xref></li>
      <li><xref target="RFC4364">BGP/MPLS IP Virtual Private Networks (VPNs)</xref></li>
      <li><xref target="RFC4451">BGP MED Considerations</xref></li>
      <li><xref target="RFC4659">BGP-MPLS IP Virtual Private Network (VPN) Extension for IPv6 VPN</xref></li>
      <li><xref target="RFC4724">Graceful Restart Mechanism for BGP</xref></li>
      <li><xref target="RFC4760">Multiprotocol Extentions for BGP-4</xref></li>
      <li><xref target="RFC4761">Virtual Private LAN Service (VPLS) Using BGP for Auto-Discovery and Signaling</xref></li>
      <li><xref target="RFC5065">Autonomous System Configuration for BGP</xref></li>
      <li><xref target="RFC5082">The Generalized TTL Security Mechanism (GTSM)</xref></li>
      <li><xref target="RFC5701">IPv6 Address Specific BGP Extended Community Attribute</xref></li>
      <li><xref target="RFC5880">Bidirectional Forward Detection (BFD)</xref></li>
      <li><xref target="RFC5881">Bidirectional Forward Detection for IPv4 and IPv6 (Single Hop)</xref></li>
      <li><xref target="RFC5883">Bidirectional Forwarding Detection (BFD) for Multihop Paths</xref></li>
      <li><xref target="RFC5925">The TCP Authentication Option</xref></li>
      <li><xref target="RFC6514">BGP Encodings and Procedures for Multicast in MPLS/BGP IP VPNs</xref></li>
      <li><xref target="RFC6793">BGP Support for Four-Octet Autonomous System (AS) Number Space</xref></li>
      <li><xref target="RFC7911">Advertisement of Multiple Paths in BGP </xref></li>
      <li><xref target="RFC8092">BGP Large Communities Attributes</xref></li>
      <li><xref target="RFC8177">YANG Key Chain</xref></li>
      <li><xref target="RFC8277">Carrying Label Information in BGP-4 </xref></li>
      <li><xref target="RFC9067">A YANG Data Model for Routing Policy</xref></li>
      <li><xref target="RFC9314">YANG Data Model for Bidirectional Forward Detection</xref></li>
      <li><xref target="RFC9293">Transmission Control Protocol</xref></li>
      <li><xref target="I-D.ietf-tcpm-yang-tcp">YANG Model for Transmission Control Protocol (TCP) Configuration</xref></li>
      </ul></t>

      <section title="Modules and submodules for base items">
	<section title="ietf-bgp module">
        <t>
	  <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure>
	</t>
	</section>
	<section title = "ietf-bgp-capabilities submodule">
	  <t>
	  <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-capabilities@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-capabilities@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
          </figure>
	  </t>
	</section>
	<section title = "ietf-bgp-common submodule">
	  <t>
	  <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-common@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-common@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
          </figure>
	  </t>
	</section>
	<section title = "ietf-bgp-common-multiprotocol submodule">
	  <t>
	  <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-common-multiprotocol@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-common-multiprotocol@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
          </figure>
	  </t>
	</section>
	<section title = "ietf-bgp-common-structure submodule">
	  <t>
	    <figure>
              <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-common-structure@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-common-structure@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
            </figure>
	  </t>
	</section>
	<section title = "ietf-bgp-neighbors submodule">
	  <t>
	    <figure>
              <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-neighbor@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-neighbor@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
            </figure>
	  </t>
	</section>
      </section>

      <section title="BGP notification module">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "iana-bgp-notification@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/iana-bgp-notification@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
          </figure></t>
      </section>

      <section title="BGP types module">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "iana-bgp-types@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/iana-bgp-types@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
          </figure></t>
      </section>

      <section title="BGP Community types module">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "iana-bgp-community-types@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/iana-bgp-community-types@YYYY-MM-DD.yang)
<CODE ENDS>

        ]]></artwork>
          </figure></t>
      </section>

      <section title="BGP policy module">
        <t><figure>
            <artwork><![CDATA[
    <CODE BEGINS> file "ietf-bgp-policy@YYYY-MM-DD.yang"
    INSERT_TEXT_FROM_FILE(../bin/ietf-bgp-policy@YYYY-MM-DD.yang)
    <CODE ENDS>
    ]]></artwork>
          </figure></t>
      </section>

      <section title="RIB submodules">
	<section title = "ietf-bgp-rib submodule">
          <t>
	    <figure>
              <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
            </figure>
	  </t>
	</section>
	<section title = "ietf-bgp-rib-types submodule">
	  <t>
            <figure>
              <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-types@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-types@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
            </figure>
	  </t>
	</section>
	<section title = "ietf-bgp-rib-attributes submodule">
	  <t>
            <figure>
              <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-attributes@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-attributes@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
            </figure>
	  </t>
        </section>
	<section title = "ietf-bgp-rib-tables submodule">
          <t>
	    <figure>
              <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-tables@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-tables@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
            </figure>
	  </t>
        </section>
      </section>
    </section>

    <section title="Contributors">
      <t>Previous versions of this document saw contributions from Anees
      Shaikh, Rob Shakir, Kevin D'Souza, Alexander Clemm, Aleksandr Zhadkin,
      and Xyfeng Liu.</t>
    </section>

    <section title="Acknowledgements">
      <t>The authors are grateful for valuable contributions to this
      document and the associated models from: Ebben Aires, Pavan
      Beeram, Chris Chase, Ed Crabbe, Luyuan Fang, Bill Fenner, Akshay
      Gattani, Josh George, Vijay Gill, Matt John, Dhanendra Jain,
      Acee Lindem, Ina Minei, Carl Moberg, Ashok Narayanan, Einar
      Nilsen-Nygaard, Adam Simpson, Puneet Sood, Jason Sterne, Jeff
      Tantsura, Jim Uttaro, and Gunter Vandevelde.</t>

      <t>Credit is also due to authors of the OpenConfig, whose model
      was relied upon to come up with this model.</t>

      <t>Special thanks to Robert Wilton who helped convert the YANG
      models to a NMDA compatible model, to Yingzhen Qu who
      contributed to the policy part of the module, and to Derek Yeung
      in helping out with Extended Communities support in the
      model.</t>
    </section>
  </middle>

  <back>
    <references title="Normative references">
      <?rfc include='reference.RFC.1997.xml'?>

      <?rfc include='reference.RFC.2119.xml'?>

      <?rfc include='reference.RFC.2439.xml'?>

      <?rfc include='reference.RFC.2918.xml'?>

      <?rfc include='reference.RFC.3688.xml'?>

      <?rfc include='reference.RFC.4271.xml'?>

      <?rfc include='reference.RFC.4360.xml'?>

      <?rfc include='reference.RFC.4364.xml'?>

      <?rfc include='reference.RFC.4456.xml'?>

      <?rfc include='reference.RFC.4659.xml'?>

      <?rfc include='reference.RFC.4724.xml'?>

      <?rfc include='reference.RFC.4760.xml'?>

      <?rfc include='reference.RFC.4761.xml'?>

      <?rfc include='reference.RFC.5065.xml'?>

      <?rfc include='reference.RFC.5701.xml'?>

      <?rfc include='reference.RFC.5880.xml'?>

      <?rfc include='reference.RFC.5881.xml'?>

      <?rfc include='reference.RFC.5883.xml'?>

      <?rfc include='reference.RFC.6020.xml'?>

      <?rfc include='reference.RFC.6241.xml'?>

      <?rfc include='reference.RFC.6242.xml'?>

      <?rfc include='reference.RFC.6514.xml'?>

      <?rfc include='reference.RFC.6793.xml'?>

      <?rfc include='reference.RFC.6811.xml'?>

      <?rfc include='reference.RFC.6991.xml'?>

      <?rfc include='reference.RFC.7607.xml'?>

      <?rfc include='reference.RFC.7911.xml'?>

      <?rfc include='reference.RFC.7950.xml'?>

      <?rfc include='reference.RFC.8040.xml'?>

      <?rfc include='reference.RFC.8092.xml'?>

      <?rfc include='reference.RFC.8174.xml'?>

      <?rfc include='reference.RFC.8177.xml'?>

      <?rfc include='reference.RFC.8277.xml'?>

      <?rfc include='reference.RFC.8341.xml'?>

      <?rfc include='reference.RFC.8349.xml'?>

      <?rfc include='reference.RFC.8446.xml'?>

      <?rfc include='reference.RFC.8528.xml'?>

      <?rfc include='reference.RFC.8529.xml'?>

      <?rfc include='reference.RFC.9067.xml'?>

      <?rfc include='reference.RFC.9293.xml'?>

      <?rfc include='reference.RFC.9314.xml'?>

      <?rfc include='reference.I-D.ietf-tcpm-yang-tcp.xml'?>
    </references>

    <references title="Informative references">
      <?rfc include='reference.RFC.2385.xml'?>

      <?rfc include='reference.RFC.2622.xml'?>

      <?rfc include='reference.RFC.3765.xml'?>

      <?rfc include='reference.RFC.4451.xml'?>

      <?rfc include='reference.RFC.5082.xml'?>

      <?rfc include='reference.RFC.5398.xml'?>

      <?rfc include='reference.RFC.5925.xml'?>

      <?rfc include='reference.RFC.6151.xml'?>

      <?rfc include='reference.RFC.7454.xml'?>

      <?rfc include='reference.RFC.8342.xml'?>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" 
      href="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-idr-deprecate-as-set-confed-set.xml"/>
    </references>

    <section title="Examples">
      <t>This section tries to show some examples in how the model can be
      used.</t>

      <section title="Creating BGP Instance">
        <t>This example shows how to enable BGP for a IPv4 unicast
        address family.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.0.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="Neighbor Address Family Configuration">
        <t>This example shows how to configure a BGP neighbor, where
        the remote address is 192.0.2.1, the remote AS number is
        64497, and the address family of the neighbor is IPv4
        unicast. The neighbor is configured for route flap prevention
        and it set up for standard and large communities. In addition,
        BFD is configured at a neighbor level with a local multiplier
        of 2, a desired minimum transmit interval, and a required
        minimum receive interval of 3.3 ms.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.1.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="IPv6 Neighbor Configuration">
        <t>This example shows how to configure a BGP peer, where the remote
        peer has a IPv6 address, uses TCP-AO to secure the session with the
        peer, and uses non-default timers for hold-time and keepalive.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.2.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="VRF Configuration">
        <t>This example shows how BGP can be configured for two VRFs, red and
        blue. In this case, the two network instances share a common AS, and
        distinguish between the instances using the router id.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.3.xml,68)

]]></artwork>
        </figure>
      </section>
      <section title="BGP Policy - Match Prefix and Set Community">
        <t>Routing policy using community value involves configuring
	rules to match community values in the inbound or outbound
	direction. In this example, which is heavily borrowed from
	the example on the Cisco community page, we look at
	"match community exact" match, which happens only when BGP
	updates have the same community values as specified in the
	community list.</t>
	<t>The topology in this example consists of three routers,
        R1, R2, and R3, configured with AS value of 1, 2 and 3 
        respectively. R1 advertises 5 prefixes to R2 and R3, as
        shown below.</t>
        <ul spacing="normal" indent="3">
	  <li>1.1.1.1/32 and 2.2.2.2/32 with community 11:11</li>
	  <li>3.3.3.3/32 and 4.4.4.4/32 with community 11:11 and
	  22:22</li>
	  <li>5.5.5.5/32 with community 33.33</li>
	</ul>
	<t>Route Policy TO_R2 defines the policy that R1 uses in route
	updates towards R2. It consists of three statements, statement
	10 that has a exact match rule for the prefix list L0andL1,
	and a set-community action of add for 11:11.  The second
	statement, statement 20, consists of an exact match rule for
	prefix list L2andL3, with a set community action of remove for
	11:11 22:22. The final statement, statement 30, consists of an
	exact match rule for prefix list L4, with a set community
	action of replace for 33:33.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.4.xml,68)

]]></artwork>
        </figure>
      </section>
            
      <section title="BGP Policy - Match Next-hop and Set Community">
        <t>In this example, a "next-hop-set" is configured using option "invert"
          from "matct-set-options" to match next-hop not equal to "192.0.2.2" and
          then set community to 55:55.</t>
        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.5.xml,68)

]]></artwork>
        </figure>
      </section>
    </section>

    <section title="How to add a new AFI and Augment a Module">
      <t>This section explains how a new AFI can be defined in a new module
      and how that module can then be augmented. Assume that the new AFI being
      defined is called 'foo' which extends the base identity of
      'afi-safi-type', and the augmentation is to add a new container for
      'foo' under two different XPaths. The example shows how the base
      identity can be extended to add this new AFI, and then use the augmented
      containers be used to add 'foo' specific information.</t>

      <figure>
        <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-newafi-bgp@YYYY-MM-DD.yang)

]]></artwork>
      </figure>
    </section>

    <section title="How to deviate a module">
      <t>This example shows how the BGP can be deviated to indicate two nodes
      that the particular implementation is choosing not to support.</t>

      <figure>
        <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-newco-bgp-a.2@YYYY-MM-DD.yang)

]]></artwork>
      </figure>
    </section>

    <section title="Complete configuration tree diagram">
      <t>Here is a complete tree diagram for the configuration and
      operational part of the model.</t>

      <t><figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD-tree.txt)

]]></artwork>
        </figure></t>
    </section>

    <section title="Complete policy tree diagram">
      <t>Here is a complete tree diagram for the policy portion of
      the model.</t>

      <t><figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp-policy@YYYY-MM-DD-tree.txt)

]]></artwork>
        </figure></t>
    </section>
    <section title="BGP YANG Model AS_PATH Regular Expressions">
      <section title="AS_PATH Regular Expressions in Implementations">
        <t>Implementations of BGP have different ways of rendering the received
        BGP AS_PATH in their interfaces.  Deployed implementations generally
        render the AS_PATHs consistently from left to right where the
        left-most AS number matches the neighbor AS; most recently prepended AS,
        per <xref target="RFC4271" section="5.1.2"/>. Deployed implementations
        also use different characters to match the associated AS_PATH segment
        types.  Those segment types are AS_SEQUENCE, AS_SET, AS_CONFED_SEQUENCE,
        AS_CONFED_SET.  Implementations also have no fully standardized way to
        render white-space between AS numbers in combination with possible
        characters denoting the AS_PATH segment types.</t>

        <t>This YANG model standardizes no particular rendering format for an
        AS_PATH.  This permits the model to be generally applicable for
        implementations of BGP and does not conflict with deployed formatting
        choices.</t>

        <t>AS_PATH regular expressions are a common tool used in BGP policy.
        Such regular expressions match on components of the AS_PATH.  In
        deployed implementations of BGP, there are two common high-level forms
        of AS_PATH matching:</t>

        <ul>
        <li>Character based tokens. In this form, AS numbers are treated as a
        string of characters. Regular expressions are evaluated vs. the
        characters in the string. E.g. "64503+" will match "64503", "645033",
        etc.</li>

        <li>Integer based tokens. In this form, AS numbers are treated as
        tokens.  Regular expressions are evaluated vs. the full integers. E.g.
        "64503+" will match "64503", "64503 64503".</li>
        </ul>
      </section>
      <section title="Why not use standard POSIX regular expressions?">
        <ul>
        <li>It would be necessary to standardize the format of the AS_PATH
        in this module.  See above for reasons this was not chosen.</li>

        <li>Consistently dealing with separator token in the configured AS_PATH
        regular expression can be error-prone.  Operators interacting with BGP
        data using "grep" are familiar with this challenge.</li>

        <li>POSIX character-based regular expressions readily map to
        implementations that match on character based tokens, but do not easily
        map to integer based token implementation.  Integer based token matches
        can be expressed in implementations that do character based tokens.</li>

        <li>Additionally, YANG by default doesn't use POSIX for its regular
        expressions.</li>
        </ul>
      </section>
      <section title="BGP YANG AS_PATH Regular Expressions"
       anchor="aspath-regex">
        <t>To address the points above, the BGP YANG AS_PATH regular expressions
        are a subset of, and are inspired by, the prior work in 
        <xref target="RFC2622" section="5.4">RPSL</xref>.</t>

        <dl newline="true">
          <dt>ASN</dt>
          <dd>ASN is an 4-byte AS Number, from 1..4294967295.  0 is not a valid
          AS Number and is not permitted to be advertised in BGP AS_PATHs per 
          <xref target="RFC7607"/>.</dd>

          <dt>.</dt>
          <dd>matches any single AS number in the AS_PATH.</dd>

          <dt>[...]</dt>
          <dd>is an AS number set.  It matches AS_PATHs with AS numbers listed
          between the brackets.  The AS numbers in the set are separated by
          white-space characters.  If a '-' is used between two AS numbers in
          this set, all AS numbers in the range between the two AS numbers are
          included in the set.</dd>

          <dt>[^...]</dt>
          <dd>is a complemented AS number set.  It matches an AS_PATH which is
          not matched by the numbers in the set.</dd>

          <dt>^</dt>
          <dd>Matches the empty string at the beginning of an AS_PATH.</dd>
          
          <dt>$</dt>
          <dd>Matches the empty string at the end of an AS_PATH.</dd>
          
          <dt>Unary postfix operators * + ?  {m} {m,n} {m,}</dt>
          <dd>For a regular expression A, A* matches zero or more occurrences of
          A; A+ matches one or more occurrences of A; A?  matches zero or one
          occurrence of A; A{m} matches m occurrence of A; A{m,n} matches m to n
          occurrence of A; A{m,} matches m or more occurrence of A. For example,
          [AS1 AS2]{2} matches AS1 AS1, AS1 AS2, AS2 AS1, and AS2 AS2.</dd>

          <dt>Binary catenation operator</dt>
          <dd>This is an implicit operator and exists between two regular
          expressions A and B when no other explicit operator is specified.  The
          resulting expression A B matches an AS-path if A matches some prefix
          of the AS-path and B matches the rest of the AS-path.</dd>

          <dt>Binary alternative (or) operator |</dt>
          <dd>For a regular expressions A and B, A | B matches any AS-path that
          is matched by A or B.</dd>

          <dt>(...)</dt>
          <dd>Parenthesis can be used to override the default order of
          evaluation.</dd>
        </dl>

        <t>Whitespace in a BGP YANG AS_PATH regular expression is only used to
        separate tokens within the regular expression.  It is otherwise without
        meaning and may be included or omitted for visual clarity.</t>
      </section>
      <section title="Matching AS_PATH Segment Types in AS_PATH Regular
       Expressions">
        <t>There are no deployed implementations of BGP AS_PATH regular
        expression matches that permit matching of AS_PATH segment types.  Known
        implementations simply ignore the segment types for their internal
        representation strings used by that implementation's regular
        expression.  While this would seem to be problematic, and may create
        difficulties in some specific scenarios, the following reasons have
        mitigated this consideration over the years:</t>

        <ul>
        <li>AS_SET or AS_CONFED_SET in the AS_PATH not only introduces
        additional character tokens for delimiting the segment, but mean that
        the contents of that position within the AS_PATH may vary.  In general,
        implementations of AS_SETs will sort the contents of the AS_SET, but
        this is only a recommendation and not a protocol requirement.  AS_SETs
        are being deprecated for implementation and deployment in BGP due to the
        issues that they raise in BGP security features.  See
        <xref target="I-D.ietf-idr-deprecate-as-set-confed-set"/>.</li>

        <li>BGP Confederation are the always the left-most ASes in the AS_PATH.
        As a result, matching on confederation ASes may be done using the '^'
        anchor character against the locally-configured Confederation member
        ASes.  These are typically either publicly registered AS numbers under
        the control of a single entity, or private AS numbers that are scrubbed
        as part of route filtering purposes at the provider's network edge.</li>
        </ul>
      </section>
      <section title="BGP YANG AS_PATH Regular Expressions ABNF">
        <t>TBD...</t>
      </section>
      <section title="Example BGP YANG AS_PATH Regular Expressions">
        <dl newline="true">
          <dt>64496</dt>
          <dd>Matches the AS_PATH that contains at least one instance of 64496,
          regardless of its position.</dd>

          <dt>^64496$</dt>
          <dd>Matches the AS_PATH that is exactly one AS long, and that AS is
          64496.</dd>

          <dt>^64496</dt>
          <dd>Matches the AS_PATH where the left-most (neighbor) AS is
          64496.</dd>

          <dt>64496$</dt>
          <dd>Matches the AS_PATH where the right-most (origin) AS is
          64496.</dd>

          <dt>[64496 64500]</dt>
          <dd>Matches the AS_PATH where at least one of the ASes is either 64496
          or 64500.</dd>

          <dt>[^64496 64500]</dt>
          <dd>Matches the AS_PATH where neither 64496 nor 64500 are present in
          the AS_PATH.</dd>

          <dt>[64496-64511]</dt>
          <dd>Matches the AS_PATH where at least one AS number is in the range
          64496..64511, inclusive.  This matches the documentation AS numbers in
          <xref target="RFC5398"/>.</dd>

          <dt>64496 64500</dt>
          <dd>Matches the AS_PATH where 64496 is present and immediately
          followed by 64500.</dd>

          <dt>64496 | 64500</dt>
          <dd>Matches the AS_PATH where 64496 or 64500 occur in the
          AS_PATH.</dd>

          <dt>^ 64496 .{2} ( 64500 |  [64505-64511] )</dt>
          <dd>Matches the AS_PATH where the left-most (neighbor) AS is 64496, is
          followed immediately by any two ASes and either 64500 or an AS in the
          range 64505..64511.</dd>
        </dl>
      </section>
    </section>
  </back>
</rfc>
