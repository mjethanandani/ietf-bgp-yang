<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="std" docName="draft-ietf-idr-bgp-model-08" ipr="trust200902">
  <?rfc toc="yes"?>

  <front>
    <title abbrev="BGP YANG Model">BGP YANG Model for Service Provider
    Networks</title>

    <author fullname="Mahesh Jethanandani" initials="M.J."
            surname="Jethanandani">
      <organization>VMware</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>mjethanandani@gmail.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Keyur Patel" initials="K.P." surname="Patel">
      <organization>Arrcus</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region>CA</region>

          <country>USA</country>
        </postal>

        <email>keyur@arrcus.com</email>
      </address>
    </author>

    <author fullname="Susan Hares" initials="S." surname="Hares">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>7453 Hickory Hill</street>

          <city>Saline</city>

          <region>MI</region>

          <code>48176</code>

          <country>USA</country>
        </postal>

        <email>shares@ndzh.com</email>
      </address>
    </author>

    <author fullname="Jeffrey Haas" initials="J.H" surname="Haas">
      <organization>Juniper Networks</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>jhaas@pfrc.org</email>

        <uri/>
      </address>
    </author>

    <date day="4" month="November" year="2019"/>

    <area>Routing</area>

    <workgroup>Interdomain Routing</workgroup>

    <keyword>bgp</keyword>

    <keyword>yang</keyword>

    <abstract>
      <t>This document defines a YANG data model for configuring and managing
      BGP, including protocol, policy, and operational aspects, such as RIB,
      based on data center, carrier and content provider operational
      requirements.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>This document describes a <xref target="RFC7950">YANG</xref> data
      model for the <xref target="RFC4271">BGP-4</xref> protocol, including
      various protocol extensions, policy configuration, as well as defining
      key operational state data, including Routing Information Base (RIB).
      The model is intended to be vendor-neutral, in order to allow operators
      to manage BGP configuration in heterogeneous environments with routers
      supplied by multiple vendors. The model is also intended to be readily
      mapped to existing implementations to facilitate support from as large a
      set of routing hardware and software vendors as possible. This module
      does not support previous versions of BGP, and cannot support
      establishing and maintaining state information of neighbors with
      previous versions of BGP.</t>

      <section anchor="goals" title="Goals and approach">
        <t>The model covers the base BGP features that are deployed across
        major implementations and the common BGP configurations in use across
        a number of operator network deployments. In particular, this model
        attempts to cover BGP features defined in <xref
        target="RFC4271">BGP</xref>, <xref target="RFC1997">BGP Communities
        Attribute </xref>, <xref target="RFC4456">BGP Route Reflection</xref>,
        <xref target="RFC4760">Multiprotocol Extensions for BGP-4 </xref>,
        <xref target="RFC5065">Autonomous System Confederations for BGP
        </xref>, <xref target="RFC2439">BGP Route Flap Damping </xref>, <xref
        target="RFC4724">Graceful Restart Mechanism for BGP </xref>, <xref
        target="RFC6811">BGP Prefix Origin Validation </xref>, and <xref
        target="RFC7911">Advertisement of Multiple Paths in BGP</xref>.</t>

        <t>Along with configuration of base BGP features, this model also
        addresses policy configuration, by providing "hooks" for applying
        policies, and also defining BGP-specific policy features. The BGP
        policy features are intended to be used with the general routing
        policy model defined in <xref target="I-D.ietf-rtgwg-policy-model">A
        YANG Data Model for Routing Policy Management </xref>. The model
        conforms to the <xref target="RFC8342">NMDA</xref> architecture and
        has support for configuring <xref target="RFC5880">Bidirectional
        Forward Detection (BFD) </xref> for fast next hop liveliness
        check.</t>

        <t>For the base BGP features, the focus of the model described in this
        document is on providing configuration and operational state
        information relating to: <list style="symbols">
            <t>The global BGP instance, and neighbors whose configuration is
            specified individually, or templated with the use of
            peer-groups.</t>

            <t>The address families that are supported by peers, and the
            global configuration which relates to them.</t>

            <t>The policy configuration "hooks" and BGP-specific policy
            features that relate to a neighbor - controlling the import and
            export of NLRIs.</t>

            <t>RIB contents.</t>
          </list></t>

        <t>As mentioned earlier, any configuration items that are deemed to be
        widely available in existing major BGP implementations are included in
        the model. Additional, more esoteric, configuration items that are not
        commonly used, or only available from a single implementation, are
        omitted from the model with an expectation that they will be available
        in companion modules that augment or extend the current model. This
        allows clarity in identifying data that is part of the vendor-neutral
        base model.</t>

        <t>Where possible, naming in the model follows conventions used in
        available standards documents, and otherwise tries to be
        self-explanatory with sufficient descriptions of the intended
        behavior. Similarly, configuration data value constraints and default
        values, where used, are based on recommendations in current standards
        documentation, or those commonly used in multiple implementations.
        Since implementations can vary widely in this respect, this version of
        the model specifies only a limited set of defaults and ranges with the
        expectation of being more prescriptive in future versions based on
        actual operator use.</t>
      </section>

      <section title="Note to RFC Editor">
        <t>This document uses several placeholder values throughout the
        document. Please replace them as follows and remove this note before
        publication.</t>

        <t>RFC XXXX, where XXXX is the number assigned to this document at the
        time of publication.</t>

        <t>YYYY-MM-DD with the actual date of the publication of this
        document.</t>

        <t>RFC ZZZZ, where ZZZZ is the number assigned to <xref
        target="I-D.ietf-rtgwg-policy-model">A YANG Data Model for Routing
        Policy Management</xref>.</t>

        <t>RFC AAAA, where AAAA is the number assigned to <xref
        target="RFC7854">BGP Monitoring Protocol </xref>.</t>

        <t>RFC BBBB, where BBBB is the number assigned to <xref
        target="I-D.ietf-bfd-yang">YANG Data Model for Bidirectional Forward
        Detection</xref>.</t>
      </section>

      <section title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119">BCP 14 </xref> <xref target="RFC8174"/> when,
        and only when, they appear in all capitals, as shown here.</t>
      </section>

      <section title="Abbreviations">
        <texttable>
          <ttcol>Abbreviation</ttcol>

          <ttcol/>

          <c>AFI</c>

          <c>Address Family Identifier</c>

          <c>BFD</c>

          <c>Bidirectional Forward Detection</c>

          <c>NLRI</c>

          <c>Network Layer Reachability Information</c>

          <c>NMDA</c>

          <c>Network Management Datastore Architecture</c>

          <c>RIB</c>

          <c>Routing Information Base</c>

          <c>SAFI</c>

          <c>Subsequent Address Family Identifier</c>

          <c>VRF</c>

          <c>Virtual Routing and Forwarding</c>
        </texttable>
      </section>
    </section>

    <section anchor="overview" title="Model overview">
      <t>The BGP model is defined across several YANG modules and submodules,
      but at a high level is organized into six elements:</t>

      <t><list style="symbols">
          <t>base protocol configuration -- configuration affecting BGP
          protocol-related operations, defined at various levels of
          hierarchy.</t>

          <t>multiprotocol configuration -- configuration affecting individual
          address-families within BGP <xref target="RFC4760">Multiprotocol
          Extensions for BGP-4 </xref>.</t>

          <t>neighbor configuration -- configuration affecting an individual
          neighbor within BGP.</t>

          <t>neighbor multiprotocol configuration -- configuration affecting
          individual address-families for a neighbor within BGP.</t>

          <t>policy configuration -- hooks for application of the policies
          defined in <xref target="I-D.ietf-rtgwg-policy-model">A YANG Data
          Model for Routing Policy Management </xref> that act on routes sent
          (received) to (from) peers or other routing protocols and
          BGP-specific policy features.</t>

          <t>operational state -- variables used for monitoring and management
          of BGP operations.</t>
        </list></t>

      <t>These modules also make use of standard Internet types, such as IP
      addresses and prefixes, autonomous system numbers, etc., defined in
      <xref target="RFC6991">Common YANG Data Types </xref>.</t>

      <section anchor="overview.protocol" title="BGP protocol configuration">
        <t>The BGP protocol configuration model is organized hierarchically,
        much like the majority of router implementations. That is,
        configuration items can be specified at multiple levels, as shown
        below.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD-sub-tree.txt)

]]></artwork>
        </figure>

        <t>Users may specify configuration at a higher level and have it apply
        to all lower-level items, or provide overriding configuration at a
        lower level of the hierarchy. Overriding configuration items are
        optional, with neighbor specific configuration being the most specific
        or lowest level, followed by peer-group, and finally global. Global
        configuration options reflect a subset of the peer-group or neighbor
        specific configuration options which are relevant to the entire BGP
        instance.</t>

        <t>The model makes the simplifying assumption that most of the
        configuration items are available at all levels of the hierarchy. That
        is, very little configuration is specific to a particular level in the
        hierarchy, other than obvious items such as "group-name" only being
        available for the peer group-level config. A notable exception is for
        sub-address family configuration where some items are only applicable
        for a given AFI-SAFI combination.</t>

        <t>In order to allow common configuration to be applied to a set of
        neighbors, all neighbor configuration options are available within a
        peer-group. A neighbor is associated to a particular peer-group
        through the use of a peer-group leaf (which provides a reference to a
        configured item in the peer-group list).</t>

        <t>Address-family configuration is made available in multiple points
        within the model - primarily within the global container, where
        instance-wide configuration can be set (for example, global protocol
        parameters, the BGP best path route selection options, or global
        policies relating to the address-family); and on a per-neighbor or
        per-peer-group basis, where address-families can be enabled or
        disabled, and policy associated with the parent entity applied. Within
        the afi-safi container, generic configuration that applies to all
        address-families (e.g., whether the AFI-SAFI is enabled) is presented
        at the top-level, with address-family specific containers made
        available for options relating to only that AFI-SAFI. Within the
        current revision of the model a generic set of address-families, and
        common configuration and state options are included - further work is
        expected to add additional parameters to this area of the model.</t>

        <t>The following address-families are currently supported by the
        model:</t>

        <figure>
          <artwork><![CDATA[
        +--rw bgp
          +--rw global!
             +--rw afi-safis
                +--rw afi-safi* [afi-safi-name]
                   +--rw afi-safi-name              identityref
                   |
                   +--rw ipv4-unicast
                   |     ...
                   +--rw ipv6-unicast
                   |     ...
                   +--rw ipv4-labeled-unicast
                   |     ...
                   +--rw ipv6-labeled-unicast
                   |     ...
                   +--rw l3vpn-ipv4-unicast
                   |     ...
                   +--rw l3vpn-ipv6-unicast
                   |     ...
                   +--rw l3vpn-ipv4-multicast
                   |     ...
                   +--rw l3vpn-ipv6-multicast
                   |     ...
                   +--rw l2vpn-vpls
                   |     ...
                   +--rw l2vpn-evpn
                   |     ...
      ]]></artwork>
        </figure>
      </section>

      <section anchor="overview.policy" title="Policy configuration overview">
        <t>The BGP policy configuration model augments the generic YANG
        routing policy model described in <xref
        target="I-D.ietf-rtgwg-policy-model">A YANG Data Model for Routing
        Policy Management </xref>, which represents a condition-action policy
        framework for routing. This model adds BGP-specific conditions (e.g.,
        matching on the community attribute), and actions (e.g., setting local
        preference) to the generic policy framework.</t>

        <t>Policies that are defined in the routing-policy model are
        referenced in multiple places within the model: <list style="symbols">
            <t>within the global instance, where a policy applies to all
            address-families for all peers.</t>

            <t>on a global AFI-SAFI basis, where policies apply to all peers
            for a particular address-family.</t>

            <t>on a per-peer-group or per-neighbor basis - where the policy
            applies to all address-families for the particular group or
            neighbor.</t>

            <t>on a per-afi-safi basis within a neighbor or peer-group
            context, where the policy is specific to the AFI-SAFI for a a
            specific neighbor or group.</t>
          </list></t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp-policy@YYYY-MM-DD-tree.txt)
            ]]></artwork>
        </figure>
      </section>

      <section title="BGP RIB overview">
        <t>The RIB data model represents the BGP RIB contents. The model
        supports five logical RIBs per address family.</t>

        <t>A abridged version of the tree shows the RIB portion of the tree
        diagram.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD-rib-tree.txt)

]]></artwork>
          </figure></t>

        <section title="Local Routing">
          <t>The loc-rib is the main BGP routing table for the local routing
          instance, containing best-path selections for each prefix. The
          loc-rib table may contain multiple routes for a given prefix, with
          an attribute to indicate which was selected as the best path. Note
          that multiple paths may be used or advertised even if only one path
          is marked as best, e.g., when using BGP add-paths. An implementation
          may choose to mark multiple paths in the RIB as best path by setting
          the flag to true for multiple entries.</t>
        </section>

        <section title="Pre updates per-neighbor">
          <t>The adj-rib-in-pre table is a per-neighbor table containing the
          NLRI updates received from the neighbor before any local input
          policy rules or filters have been applied. This can be considered
          the 'raw' updates from a given neighbor.</t>
        </section>

        <section title="Post updates per-neighbor">
          <t>The adj-rib-in-post table is a per-neighbor table containing the
          routes received from the neighbor that are eligible for best-path
          selection after local input policy rules have been applied.</t>
        </section>

        <section title="Pre route advertisements per-neighbor">
          <t>The adj-rib-out-pre table is a per-neighbor table containing
          routes eligible for sending (advertising) to the neighbor before
          output policy rules have been applied.</t>
        </section>

        <section title="Post route advertisements per-neighbor">
          <t>The adj-rib-out-post table is a per-neighbor table containing
          routes eligible for sending (advertising) to the neighbor after
          output policy rules have been applied</t>
        </section>
      </section>
    </section>

    <section title="Relation to other YANG data models">
      <t>The BGP model augments the Routing Management model <xref
      target="RFC8349">A YANG Data Model for Routing Management </xref> which
      defines the notion of routing, routing protocols, and RIBs. The notion
      of Virtual Routing and Forwarding (VRF) is derived by using the <xref
      target="RFC8528">YANG Schema Mount</xref> to mount the Routing
      Management module under the <xref target="RFC8529">YANG Data Model for
      Network Instances</xref>.</t>
    </section>

    <section title="Security Considerations">
      <t>The YANG module specified in this document defines a schema for data
      that is designed to be accessed via network management protocols such as
      <xref target="RFC6241">NETCONF</xref> or <xref
      target="RFC8040">RESTCONF</xref>. The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      <xref target="RFC6242">Secure Shell (SSH)</xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is <xref
      target="RFC8446">TLS</xref>. The <xref target="RFC8341">NETCONF Access
      Control Model (NACM) </xref> provides the means to restrict access for
      particular NETCONF or RESTCONF users to a preconfigured subset of all
      available NETCONF or RESTCONF protocol operations and content.</t>

      <t>There are a number of data nodes defined in this YANG module that are
      writable/creatable/deletable (i.e., config true, which is the default).
      These data nodes may be considered sensitive or vulnerable in some
      network environments. Write operations (e.g., edit-config) to these data
      nodes without proper protection can have a negative effect on network
      operations. These are the subtrees and data nodes and their
      sensitivity/vulnerability:</t>

      <t>Some of the readable data nodes in this YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control read access (e.g., via get, get-config, or
      notification) to these data nodes. These are the subtrees and data nodes
      and their sensitivity/vulnerability:</t>

      <t>Some of the RPC operations in this YANG module may be considered
      sensitive or vulnerable in some network environments. It is thus
      important to control access to these operations. These are the
      operations and their sensitivity/vulnerability:</t>

      <t><xref target="RFC7454">BGP OPSEC</xref> describes several policies
      that can be used to secure a BGP. In particular, it recommends securing
      the underlying TCP session and to use <xref target="RFC5082">Generalized
      TTL Security Mechanism (GTSM)</xref> capability to make it harder to
      spoof a BGP session. This module allows implementations that want to
      support the capability to configure a TTL value, under a feature flag.
      It also defines a container 'secure-session' that can be augmented with
      <xref target="RFC5925">TCP-Authentication Option (TCP-AO)</xref>, or
      other methods to secure a BGP session, and will be developed in a future
      version of this draft.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document registers three URIs and three YANG modules.</t>

      <section title="URI Registration">
        <t>in the <xref target="RFC3688">IETF XML registry</xref> [RFC3688].
        Following the format in RFC 3688, the following registration is
        requested to be made: <figure>
            <artwork><![CDATA[URI: urn:ietf:params:xml:ns:yang:ietf-bgp
URI: urn:ietf:params:xml:ns:yang:ietf-bgp-policy
URI: urn:ietf:params:xml:ns:yang:ietf-bgp-types
]]></artwork>
          </figure></t>

        <t>Registrant Contact: The IESG. XML: N/A, the requested URI is an XML
        namespace.</t>
      </section>

      <section title="YANG Module Name Registration">
        <t>This document registers three YANG module in the YANG Module Names
        registry <xref target="RFC6020">YANG</xref>.</t>

        <t><figure>
            <artwork><![CDATA[name: ietf-bgp
namespace: urn:ietf:params:xml:ns:yang:ietf-bgp
prefix: bgp
reference: RFC XXXX

name: ietf-bgp-policy
namespace: urn:ietf:params:xml:ns:yang:ietf-bgp-policy
prefix: bp
reference: RFC XXXX

name: ietf-bgp-types
namespace: urn:ietf:params:xml:ns:yang:ietf-bgp-types
prefix: bt
reference: RFC XXXX
]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="models" title="YANG modules">
      <t>The modules comprising the BGP configuration and operational model
      are described by the YANG modules and submodules in the sections
      below.</t>

      <t>The main module, ietf-bgp.yang, includes the following submodules:
      <list style="symbols">
          <t>ietf-bgp-common - defines the groupings that are common across
          more than one context (where contexts are neighbor, group,
          global)</t>

          <t>ietf-bgp-common-multiprotocol - defines the groupings that are
          common across more than one context, and relate to multiprotocol
          BGP</t>

          <t>ietf-bgp-common-structure - defines groupings that are shared by
          multiple contexts, but are used only to create structural elements,
          i.e., containers (leaf nodes are defined in separate groupings)</t>

          <t>ietf-bgp-global - groupings with data specific to the global
          context</t>

          <t>ietf-bgp-peer-group - groupings with data specific to the peer
          group context</t>

          <t>ietf-bgp-neighbor - groupings with data specific to the neighbor
          context</t>

          <t>ietf-bgp-rib - grouping for representing BGP RIB.</t>
        </list></t>

      <t>Additionally, modules include: <list style="symbols">
          <t>ietf-bgp-types - common type and identity definitions for BGP,
          including BGP policy</t>

          <t>ietf-bgp-policy - BGP-specific policy data definitions for use
          with <xref target="I-D.ietf-rtgwg-policy-model"/> (described in more
          detail <xref target="overview.policy"/>)</t>
        </list></t>
    </section>

    <section title="Structure of the YANG modules">
      <t>The YANG model can be subdivided between the main module for base
      items, types, policy data, and the RIB module. It references <xref
      target="RFC1997">BGP Communities Attribute </xref>, <xref
      target="RFC2918">Route Refresh Capability for BGP-4</xref>, , <xref
      target="RFC3765">NOPEER Community for BGP</xref>, <xref
      target="RFC4364">BGP/MPLS IP Virtual Private Networks (VPNs)</xref>,
      <xref target="RFC4659">BGP-MPLS IP Virtual Private Network (VPN)
      Extension for IPv6 VPN</xref>, <xref target="RFC4724">Graceful Restart
      Mechanism for BGP</xref>, <xref target="RFC4760">Multiprotocol
      Extenstions for BGP-4</xref>, <xref target="RFC4761">Virtual Private LAN
      Service (VPLS) Using BGP for Auto-Discovery and Signaling</xref>, <xref
      target="RFC5065">Autonomous System Configuration for BGP</xref>, <xref
      target="RFC5082">The Generalized TTL Security Mechanism (GTSM)</xref>,
      <xref target="RFC5880">Bidirectional Forward Detection (BFD)</xref>,
      <xref target="RFC5881">Bidirectional Forward Detection for IPv4 and IPv6
      (Single Hop)</xref>, <xref target="RFC5883">Bidirectional Forwarding
      Detection (BFD) for Multihop Paths</xref>, <xref target="RFC6514">BGP
      Encodings and Procedures for Multicast in MPLS/BGP IP VPNs</xref>, <xref
      target="RFC6793">BGP Support for Four-Octet Autonomous System (AS)
      Number Space</xref>, <xref target="RFC7911">Advertisement of Multiple
      Paths in BGP</xref>, and <xref target="RFC8277">Carrying Label
      Information in BGP-4</xref>.</t>

      <section title="Main module and submodules for base items">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp@YYYY-MM-DD.yang)
<CODE ENDS>


]]></artwork>
          </figure><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-common@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-common@YYYY-MM-DD.yang)
<CODE ENDS>
 
        ]]></artwork>
          </figure><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-common-multiprotocol@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-common-multiprotocol@YYYY-MM-DD.yang)
<CODE ENDS>
 
        ]]></artwork>
          </figure><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-common-structure@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-common-structure@YYYY-MM-DD.yang)
<CODE ENDS>
 
        ]]></artwork>
          </figure><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-peer-group@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-peer-group@YYYY-MM-DD.yang)
<CODE ENDS>
 
        ]]></artwork>
          </figure><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-neighbor@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-neighbor@YYYY-MM-DD.yang)
<CODE ENDS>
 

]]></artwork>
          </figure></t>
      </section>

      <section title="BGP types">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-types@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/ietf-bgp-types@YYYY-MM-DD.yang)
<CODE ENDS>
       
        ]]></artwork>
          </figure></t>
      </section>

      <section title="BGP policy data">
        <t><figure>
            <artwork><![CDATA[
    <CODE BEGINS> file "ietf-bgp-policy@YYYY-MM-DD.yang"
    INSERT_TEXT_FROM_FILE(../bin/ietf-bgp-policy@YYYY-MM-DD.yang)
    <CODE ENDS>
    ]]></artwork>
          </figure></t>
      </section>

      <section title="RIB modules">
        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-ext@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-ext@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure></t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-types@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-types@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
        </figure>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-attributes@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-attributes@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
        </figure>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-table-attributes@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-table-attributes@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
        </figure>

        <t><figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-tables@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-tables@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
          </figure></t>

        <figure>
          <artwork><![CDATA[
<CODE BEGINS> file "ietf-bgp-rib-table-attributes@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(../bin/submodules/ietf-bgp-rib-table-attributes@YYYY-MM-DD.yang)
<CODE ENDS>

]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Contributors">
      <t>Previous versions of this document saw contributions from Anees
      Shaikh, Rob Shakir, Kevin D'Souza, Alexander Clemm, Aleksandr Zhadkin,
      and Xyfeng Liu.</t>
    </section>

    <section title="Acknowledgements">
      <t>The authors are grateful for valuable contributions to this document
      and the associated models from: Ebben Aires, Pavan Beeram, Chris Chase,
      Ed Crabbe, Luyuan Fang, Bill Fenner, Akshay Gattani, Josh George, Vijay
      Gill, Matt John, Jeff Haas, Dhanendra Jain, Acee Lindem, Ina Minei, Carl
      Moberg, Ashok Narayanan, Einar Nilsen-Nygaard, Adam Simpson, Puneet
      Sood, Jason Sterne, Jeff Tantsura, Jim Uttaro, and Gunter
      Vandevelde.</t>

      <t>Credit is also due to authors of the OpenConfig, whose model was
      relied upon to come up with this model.</t>

      <t>Special thanks to Robert Wilton who helped convert the YANG models to
      a NMDA compatible model.</t>
    </section>
  </middle>

  <back>
    <references title="Normative references">
      <?rfc include='reference.RFC.1997'?>

      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.2439'?>

      <?rfc include='reference.RFC.2918'?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include='reference.RFC.4271'?>

      <?rfc include='reference.RFC.4364'?>

      <?rfc include='reference.RFC.4456'?>

      <?rfc include='reference.RFC.4659'?>

      <?rfc include='reference.RFC.4724'?>

      <?rfc include='reference.RFC.4760'?>

      <?rfc include='reference.RFC.4761'?>

      <?rfc include='reference.RFC.5065'?>

      <?rfc include='reference.RFC.5880'?>

      <?rfc include='reference.RFC.5881'?>

      <?rfc include='reference.RFC.5883'?>

      <?rfc include='reference.RFC.6020'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6242'?>

      <?rfc include='reference.RFC.6514'?>

      <?rfc include='reference.RFC.6793'?>

      <?rfc include='reference.RFC.6811'?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.RFC.7911'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.8277'?>

      <?rfc include='reference.RFC.8341'?>

      <?rfc include='reference.RFC.8349'?>

      <?rfc include='reference.RFC.8446'?>

      <?rfc include='reference.RFC.8528'?>

      <?rfc include='reference.RFC.8529'?>
    </references>

    <references title="Informative references">
      <?rfc include='reference.RFC.3765'?>

      <?rfc include='reference.RFC.5082'?>

      <?rfc include='reference.RFC.5925'?>

      <?rfc include='reference.RFC.7454'?>

      <?rfc include='reference.RFC.7854'?>

      <?rfc include='reference.RFC.8342'?>

      <?rfc include='reference.RFC.8349?>

      <?rfc include='reference.I-D.ietf-rtgwg-policy-model'?>

      <?rfc include='reference.I-D.ietf-bfd-yang'?>
    </references>

    <section title="Examples">
      <t>This section tries to show some examples in how the model can be
      used.</t>

      <section title="Creating BGP Instance">
        <t>This example shows how to enable BGP with the IPv4 unicast address
        family, while adding one network to advertise.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.0.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="Neighbor Address Family Configuration">
        <t>This example shows how to configure a BGP peer, where the remote
        address is 192.0.2.1, the remote AS number is 64497, and the address
        family of the peer is IPv4 unicast.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.1.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="IPv6 Neighbor Configuration">
        <t>This example shows how to configure a BGP peer, where the remote
        peer has a IPv6 address, and uses non-default timers for hold-time and
        keepalive.</t>

        <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.2.xml,68)

]]></artwork>
          </figure></t>
      </section>

      <section title="VRF Configuration">
        <t>This example shows how BGP can be configured for two VRFs, red and
        blue. In this case, the two network instances share a common AS, and
        distinguish between the instances using the router id.</t>

        <figure>
          <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../src/yang/example-bgp-configuration-a.1.3.xml,68)

]]></artwork>
        </figure>
      </section>
    </section>

    <section title="How to add a new AFI and Augment a Module">
      <t>This section explains how a new AFI can be defined in a new module
      and how that module can then be augmented. Assume that the new AFI being
      defined is called 'foo' which extends the base identity of
      'afi-safi-type', and the augmentation is to add a new container for
      'foo' under two different XPaths. The example shows how the base
      identity can be extended to add this new AFI, and then use the augmented
      containers be used to add 'foo' specific information.</t>

      <figure>
        <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-newafi-bgp@YYYY-MM-DD.yang)

]]></artwork>
      </figure>
    </section>

    <section title="How to deviate a module">
      <t>This example shows how the BGP can be deviated to indicate two nodes
      that the particular implementation is choosing not to support.</t>

      <figure>
        <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(../bin/example-newco-bgp-a.2@YYYY-MM-DD.yang)

]]></artwork>
      </figure>
    </section>
  </back>
</rfc>
